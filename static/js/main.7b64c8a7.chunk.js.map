{"version":3,"sources":["components/Gfrom.js","components/Bestcar.js","App.js","serviceWorker.js","index.js"],"names":["Gfrom","useState","Date","startDate","setStartDate","startDate2","setStartDate2","name","id","enctype","action","gUrl","target","onsubmit","className","type","placeholder","defaultValue","value","disabled","htmlFor","selected","onChange","date","showTimeSelect","timeFormat","timeIntervals","timeCaption","dateFormat","TextField","multiline","rows","margin","variant","style","display","onload","title","Bestcar","useStyles","makeStyles","theme","ul","padding","li","listStyle","appBar","borderBottom","palette","divider","toolbar","flexWrap","toolbarTitle","flexGrow","link","spacing","createMuiTheme","primary","main","App","classes","ThemeProvider","AppBar","position","color","elevation","Toolbar","Typography","noWrap","Link","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b64c8a7.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport DatePicker from \"react-datepicker\";\nimport \"../App.css\"\nimport TextField from '@material-ui/core/TextField';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\n\nexport default function Gfrom() {\n\n  const gUrl = \"https://docs.google.com/forms/d/e/1FAIpQLSc35mVaI0DscNFmRGA0NBzupg4hsJCM1uFv18rq1MxFzio3QA/\";\nlet submitted = false;\nconst [startDate, setStartDate] = useState(new Date());\nconst [startDate2, setStartDate2] = useState(new Date());\n\n  return (\n    <>\n      <form name=\"gform\" id=\"gform\" enctype=\"text/plain\"\n        action={gUrl + 'formResponse?'} target=\"hidden_iframe\"\n        onsubmit={submitted=true}\n        className=\"From-div\">\n        <div>\n\n          <input type=\"text\" name=\"entry.1085456845\" id=\"entry.1085456845\" placeholder=\"First name\" />\n\n          <input type=\"text\" name=\"entry.1240593602\" id=\"entry.1240593602\" placeholder=\"Last name\" />\n        </div>\n        <div>\n\n          <input type=\"text\" placeholder=\"Email\" name=\"entry.1873303376\" id=\"entry.1873303376\"/>\n          <input type=\"tel\" placeholder=\"Mobile number\" name=\"entry.999363338\" id=\"entry.999363338\"/>\n         \n        </div>\n        <div>\n                    <select name=\"entry.1328044103\"  defaultValue={'Compact'} >\n                    <option id=\"entry.1328044103\" value=\"Compact\" disabled >Vehicle</option>\n                        <option id=\"entry.1328044103\" value=\"Compact\">Compact</option>\n                        <option id=\"entry.1328044103\" value=\"Mid-Size\">Mid-Size</option>\n                    </select>\n                </div>\n\n                <>\n                    <label htmlFor=\"Pickup\">Pickup Date and Time: </label>\n                </>\n                <div>\n                    <DatePicker\n                        selected={startDate}\n                        onChange={date => setStartDate(date)}\n                        showTimeSelect\n                        timeFormat=\"HH:mm\"\n                        timeIntervals={15}\n                        timeCaption=\"time\"\n                        dateFormat=\"MMMM d, yyyy h:mm aa\"\n                        name=\"entry.883892745\"\n                        id=\"entry.883892745\"\n                    />\n                </div>\n                <>\n                    <label htmlFor=\"Return\">Return Date and Time: </label>\n                </>\n                <div>\n                    <DatePicker\n                        selected={startDate2}\n                        onChange={date => setStartDate2(date)}\n                        showTimeSelect\n                        timeFormat=\"HH:mm\"\n                        timeIntervals={15}\n                        timeCaption=\"time\"\n                        dateFormat=\"MMMM d, yyyy h:mm aa\"\n                        name=\"entry.662059231\"\n                        id=\"entry.662059231\"\n                    />\n                </div>\n\n                <>\n                    <label htmlFor=\"Return\">message </label>\n                </>\n                <div>\n                    <TextField\n                        id=\"entry.755355107\"\n                        multiline\n                        rows=\"4\"\n                        name=\"entry.755355107\"\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        \n                    />\n                </div>\n\n      \n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n\n      <iframe name=\"hidden_iframe\" id=\"hidden_iframe\" style={{display:'none'}} onload={submitted? {}:{}} title=\"myFrame\"></iframe>\n    </>\n  );\n}","import React from \"react\";\nimport \"../Bestcar.css\";\nimport Gfrom from './Gfrom.js'\nimport BestFrom from './Best-form.js'\n\n\n\n\n\n\nfunction Bestcar() {\n\n    \n    return (\n  \n\n        <div>\n           \n                <div className=\"From-Best\">\n                    <Gfrom/>\n                </div>\n            \n        </div>\n        \n    );\n}\nexport default Bestcar;\n\n\n","import React from \"react\";\n//import JandJ from \"./components/J&J.js\"\nimport CarRental from \"./components/Bestcar.js\"\nimport \"./App.css\";\nimport Link from '@material-ui/core/Link';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\n\n\n\n// Styles for the Appbar\nconst useStyles = makeStyles(theme => ({\n  '@global': {\n    ul: {\n      margin: 0,\n      padding: 0,\n    },\n    li: {\n      listStyle: 'none',\n    },\n  },\n  appBar: {\n    borderBottom: `1px solid ${theme.palette.divider}`,\n  },\n  toolbar: {\n    flexWrap: 'wrap',\n  },\n  toolbarTitle: {\n    flexGrow: 1,\n  },\n  link: {\n    margin: theme.spacing(1, 1.5),\n  }\n\n}));\n\n\n// Change the primary color\nconst theme = createMuiTheme({\n  palette: {\n      primary: {\n        main: '#000000',\n      },}\n});\n\n//const companyName = [\"Best Choice Car Rental\"]\n\nfunction App() {\n\n  const classes = useStyles();\n\n  return (\n  \n    \n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n    <AppBar position=\"fixed\" color=\"primary\" elevation={0} className={classes.appBar}>\n    <Toolbar className={classes.toolbar}>\n      <Typography variant=\"h6\" color=\"inherit\" noWrap className={classes.toolbarTitle}>\n      Best Choice Car Rental\n      </Typography>\n      <nav>\n        <Link variant=\"button\" color=\"inherit\" href=\"#\" className={classes.link} >\n        J&J Souvenirs\n        </Link>\n        <Link variant=\"button\" color=\"inherit\" href=\"#\" className={classes.link}>\n          Support\n        </Link>\n      </nav>\n    </Toolbar>\n  </AppBar>\n  </ThemeProvider>\n\n\n      <CarRental />\n    </div>\n    \n  );\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}