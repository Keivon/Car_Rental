{"version":3,"sources":["components/Carousel.js","App.js","serviceWorker.js","index.js"],"names":["autoPlay","infiniteLoop","showStatus","showThumbs","src","alt","Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","useStyles","makeStyles","theme","icon","marginRight","spacing","heroContent","backgroundColor","palette","background","paper","padding","heroButtons","marginTop","cardGrid","paddingTop","paddingBottom","card","height","display","flexDirection","cardMedia","cardContent","flexGrow","footer","root","menuButton","title","cards","Boolean","window","location","hostname","match","ReactDOM","render","classes","Fragment","className","AppBar","position","Toolbar","IconButton","edge","aria-label","CssBaseline","Container","maxWidth","Carousel","Grid","container","map","item","key","xs","sm","md","Card","CardMedia","image","CardContent","gutterBottom","component","CardActions","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c04fe8fb.chunk.js","sourcesContent":["import React from \"react\";\nimport { Carousel } from \"react-responsive-carousel\";\n\nexport default () => (\n\n  <Carousel autoPlay infiniteLoop = {true}  showStatus ={false} showThumbs = {false}>\n    <div>\n      <img src=\"http://lorempixel.com/output/cats-q-c-640-480-1.jpg\"  alt=\"\"/>\n    </div>\n    <div>\n      <img src=\"http://lorempixel.com/output/cats-q-c-640-480-2.jpg\"  alt=\"\"/>\n    </div>\n    <div>\n      <img src=\"http://lorempixel.com/output/cats-q-c-640-480-3.jpg\"  alt=\"\"/>\n    </div>\n    <div>\n      <img src=\"http://lorempixel.com/output/cats-q-c-640-480-4.jpg\"  alt=\"\"/>\n    </div>\n    <div>\n      <img src=\"http://lorempixel.com/output/cats-q-c-640-480-5.jpg\"  alt=\"\"/>\n    </div>\n    <div>\n      <img src=\"http://lorempixel.com/output/cats-q-c-640-480-6.jpg\"  alt=\"\"/>\n    </div>\n    <div>\n      <img src=\"http://lorempixel.com/output/cats-q-c-640-480-7.jpg\"  alt=\"\"/>\n    </div>\n    <div>\n      <img src=\"http://lorempixel.com/output/cats-q-c-640-480-8.jpg\"  alt=\"\"/>\n    </div>\n    <div>\n      <img src=\"http://lorempixel.com/output/cats-q-c-640-480-9.jpg\" alt=\"\" />\n    </div>\n    <div>\n      <img src=\"http://lorempixel.com/output/cats-q-c-640-480-10.jpg\"  alt=\"\"/>\n    </div>\n    <div>\n      <img src=\"http://lorempixel.com/output/cats-q-c-640-480-11.jpg\"  alt=\"\"/>\n    </div>\n    <div>\n      <img src=\"http://lorempixel.com/output/cats-q-c-640-480-12.jpg\"   alt=\"\"/>\n    </div>\n    <div>\n      <img src=\"http://lorempixel.com/output/cats-q-c-640-480-13.jpg\"  alt=\"\" />\n    </div>\n    <div>\n      <img src=\"http://lorempixel.com/output/cats-q-c-640-480-14.jpg\"  alt=\"\"/>\n    </div>\n  </Carousel> \n);","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\n//import Button from '@material-ui/core/Button';\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport IconButton from '@material-ui/core/IconButton';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\nimport Carousel from './components/Carousel.js'\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright Â© '}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        Website\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4),\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nconst cards = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nexport default function Main() {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n     \n     <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n           \n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n           {/* <Button color=\"inherit\">Book</Button>\n            <Button color=\"inherit\">Gift</Button> */}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n      \n      <main>\n        {/* landing page */}\n        <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth=\"md\">\n        <Carousel />\n      </Container>\n    </React.Fragment>\n        <Container className={classes.cardGrid} maxWidth=\"md\">\n          {/* End hero unit */}\n          <Grid container spacing={4}>\n            {cards.map(card => (\n              <Grid item key={card} xs={12} sm={6} md={4}>\n                <Card className={classes.card}>\n                  <CardMedia\n                    className={classes.cardMedia}\n                    image=\"https://source.unsplash.com/random\"\n                    title=\"Image title\"\n                  />\n                  <CardContent className={classes.cardContent}>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                      Heading\n                    </Typography>\n                    <Typography>\n                      This is a media card. You can use this section to describe the content.\n                    </Typography>\n                  </CardContent>\n                  <CardActions>\n                 { /*  <Button size=\"small\" color=\"primary\">\n                      View\n                    </Button>\n                    <Button size=\"small\" color=\"primary\">\n                      Edit\n                    </Button> */}\n                  </CardActions>\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        </Container>\n      </main>\n      {/* Footer */}\n      <footer className={classes.footer}>\n        <Typography variant=\"h6\" align=\"center\" gutterBottom>\n          Footer\n        </Typography>\n        <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\n          Something here \n        </Typography>\n        <Copyright />\n      </footer>\n      {/* End footer */}\n    </React.Fragment>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}